Типовые SQL-запросы для работы с несколькими связанными таблицами с описанием синтаксиса

Для примеров рассмотрим две связанные таблицы:

1. users — информация о пользователях.
   - id (PK) — уникальный идентификатор пользователя.
   - name — имя пользователя.

2. orders — информация о заказах пользователей.
   - id (PK) — уникальный идентификатор заказа.
   - user_id (FK) — внешний ключ, связывающий заказ с пользователем.
   - order_date — дата заказа.
   - total — сумма заказа.

CREATE TABLE users (
    id INTEGER PRIMARY KEY, -- Первичный ключ (уникальный идентификатор)
    name TEXT NOT NULL       -- Имя пользователя, не может быть NULL
);

CREATE TABLE orders (
    id INTEGER PRIMARY KEY,        -- Первичный ключ для заказов
    user_id INTEGER NOT NULL,      -- Внешний ключ, связанный с таблицей users
    order_date DATE NOT NULL,      -- Дата заказа
    total REAL NOT NULL,           -- Сумма заказа
    FOREIGN KEY (user_id)          -- Определение внешнего ключа
        REFERENCES users (id)      -- Ссылка на поле id таблицы users
);

Описание:
- PRIMARY KEY: поле, которое уникально идентифицирует каждую строку.
- FOREIGN KEY: определяет связь между таблицами через поле, которое ссылается на первичный ключ другой таблицы.
- REFERENCES: указывает, на какую таблицу и поле ссылается внешний ключ.
- NOT NULL: запрещает хранить значение NULL в этом поле.

1. Добавление данных

В таблицу users:
INSERT INTO users (name) VALUES ('Alice'), ('Bob'), ('Charlie');

Описание:
- INSERT INTO — команда для добавления данных в таблицу.
- VALUES — указывает значения, которые будут добавлены.

В таблицу orders:
INSERT INTO orders (user_id, order_date, total)
VALUES 
    (1, '2024-12-01', 100.50),
    (1, '2024-12-02', 200.00),
    (2, '2024-12-03', 300.75);

2. Выборка данных

Простая выборка всех заказов с именами пользователей (JOIN):
SELECT 
    orders.id AS order_id,      -- Переименование столбца для удобства
    users.name AS user_name,    -- Вывод имени пользователя
    orders.order_date,          -- Дата заказа
    orders.total                -- Сумма заказа
FROM 
    orders
JOIN 
    users ON orders.user_id = users.id; -- Соединение по внешнему ключу
ORDER BY orders.order_date - сортировка по дате заказа

Описание:
- SELECT — выбирает данные из таблицы.
- AS — задает псевдоним для столбца или таблицы.
- JOIN — объединяет строки из двух таблиц на основе заданного условия.
шаблон - JOIN <таблица> ON <условие связывания>
- ON — определяет условие соединения таблиц.
- ORDER BY - сортировка

Выборка заказов для конкретного пользователя:
SELECT 
    orders.id, 
    orders.order_date, 
    orders.total 
FROM 
    orders
WHERE 
    user_id = 1; -- Условие выбора по идентификатору пользователя

Описание:
- WHERE — фильтрует строки по заданному условию.

Агрегирование (общая сумма заказов каждого пользователя):
SELECT 
    users.name AS user_name,    -- Имя пользователя
    агрегирование (COUNT, SUM, MIN, MAX, AVR (сред ариф), DISTINCT (уникальных значений))
    COUNT(orders.id) AS total_orders, -- Количество заказов
    SUM(orders.total) AS total_spent -- Общая сумма заказов
FROM 
    users
LEFT JOIN 
    orders ON users.id = orders.user_id -- Левое соединение (включает всех пользователей)
GROUP BY 
    users.name; -- Группировка по имени пользователя

Описание:
- COUNT() — считает количество строк.
- SUM() — вычисляет сумму значений в столбце.
- LEFT JOIN — возвращает все строки из левой таблицы и совпадающие строки из правой.
- GROUP BY — группирует строки по указанным столбцам.

3. Обновление данных

Обновить имя пользователя:
UPDATE users
SET name = 'Alice Smith' -- Установка нового значения
WHERE id = 1;            -- Условие обновления

Описание:
- UPDATE — обновляет данные в таблице.
- SET — задает новые значения для столбцов.

Обновить сумму заказа:
UPDATE orders
SET total = 120.00
WHERE id = 1;

4. Удаление данных

Удалить заказ:
DELETE FROM orders
WHERE id = 3; -- Удаление строки с id = 3

Описание:
- DELETE — удаляет строки из таблицы.

Удалить пользователя и связанные с ним заказы:
Если внешний ключ настроен с каскадным удалением (ON DELETE CASCADE):
DELETE FROM users
WHERE id = 1;

5. Вложенные запросы

Найти пользователей с общей суммой заказов больше 200:
SELECT name 
FROM users
WHERE id IN (
    SELECT user_id 
    FROM orders
    GROUP BY user_id
    HAVING SUM(total) > 200
);

Описание:
- IN — проверяет принадлежность значения множеству.
- HAVING — фильтрует группы после выполнения агрегатных функций.

6. Создание записи с выборкой

Создать заказ для пользователя по имени:
INSERT INTO orders (user_id, order_date, total)
SELECT id, '2024-12-04', 150.00
FROM users
WHERE name = 'Alice';

7. Удаление связанных данных

Удалить все заказы пользователя "Bob":
DELETE FROM orders
WHERE user_id = (SELECT id FROM users WHERE name = 'Bob');
